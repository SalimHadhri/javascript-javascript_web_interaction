/* NB : Javascript est synchrone ==> un seul fil d'execution */
// chaque ligne sera ex√©cut√©e l'une apr√®s l'autre en attendant la fin de l'ex√©cution de la ligne pr√©c√©dente.

/********** asynchrone en javascript mais avec une execution qui reste synchrone ***********/

let productId = 1;
let productPrice = getProductPriceAsync(productId);
doSomething(productPrice);
// getProductPriceAsync() est asynchrone
// doSomething(productPrice) :  ex√©cut√©e avant la fin de l'ex√©cution de la fonction asynchrone
// productPrice : impossible a utiliser avant la fin de la fct asynchrone

/************************* EVENT LOOP *****************************/
// execution d'une fct asynchrone ==> placee dans une sorte de file d'attente ===> event loop


/************* FCT setTimeOut ***********************/
// role : ex√©cuter du code asynchrone sans bloquer le fil d'ex√©cution en cours
/* 2 parametres
        La fonction √† ex√©cuter de mani√®re asynchrone (qui sera donc ajout√©e √† la file d'attente de l'event loop) ;
        Le d√©lai, en millisecondes, avant d'ex√©cuter cette fonction.
*/
setTimeout(function() {
    console.log("I'm here!")
}, 5000);

console.log("Where are you?");// retourne une valeur qui permet d'identifier la fonction asynchrone que l'on veut executer

// setTimeout ===> X &&& clearTimout(X) ===> annuler l'execution de la fct asynchrone


/***************** AUTRES FCTS ****************/

/* setInterval : elle fonctionne exactement comme  setTimeout , √† ceci pr√®s qu'elle ex√©cute la fonction pass√©e en param√®tre en boucle
                √† une fr√©quence d√©termin√©e par le temps en millisecondes pass√© en second param√®tre.
                Il suffira de passer la valeur de retour de  setInterval  √†  clearInterval  pour stopper
                l'ex√©cution en boucle de la fonction ;
  setImmediate : Cette fonction prend en seul param√®tre la fonction √† ex√©cuter de fa√ßon synchrone.
                La fonction en question sera plac√©e dans la file d'attente de l'event loop, mais va passer devant toutes
               les autres fonctions, sauf certaines sp√©cifiques au Javascript : les √©v√©nements (les m√™mes qu'on a vus au premier chapitre
               qui sont donc ex√©cut√©s de fa√ßon asynchrone  üòâ), le rendu, et l'I/O. Il existe aussi  nextTick ,
               qui permet, l√†, de court-circuiter tout le monde. √Ä utiliser avec pr√©caution

*/


/******************** CAS I/O ****************************/

// cas:  lecture/√©criture des fichiers, requ√™tes HTTP

// fetch() : fonction asynchrone// requete HTTP ne bloque pas l'execution du code

